//This code is to be used with Google Earth Engine code editor. It was written by Guillermo Ponce-Campos and Jeffrey Gillan, researchers at the University of Arizona School of Natural Resources
//and the Environment in 2020. The code mosaics many orthomosaics and vegetation height models into super-mosaics, classifies the imagery using decision tree algorithms, outputs summary charts
//of vegetation cover and heights, and creates a web-app to display and share results. 

//This JavaScript code assumes orthomosaics and vegetation height models have been uploaded to GEE as assets.  

//////////////////////Mosaic individual orthomosaics and vegetation height models into super-mosaics/////////////////////////////////////////////
//After uploading individual orthomosaics to GEE, remove the white space around each of the ortho images.
//I am showing two ortho images as an example 
var mask = image1.select('b1').neq(255);
var image1_ = image1.updateMask(mask)

var mask = image2.select('b1').neq(255);
var image2_ = image2.updateMask(mask)

//Add both images into an image collection
var ic_sept = ee.ImageCollection
           .fromImages([image1_,image2_]), select(['b1','b2','b3']);

//Mosaic both orthoimages into a single image                   
var ic = ic_sept.mosaic();

//Sets a projection using one of the image's coordinate ref. system as well as the scale in meters
ic = ic.setDefaultProjection({crs:image54.projection().crs(),
                                                scale:0.01  // 1cm                           
                                })

print('ic', ic)

// Define an extent, the buffer at the end is needed to include all the transects.                                
var region1 = ee.Feature(ee.Geometry.MultiPolygon(table.geometry().coordinates()).bounds()).buffer(500).bounds()

//Just to double check, get nominal scale of the image
var iscale = ic.projection().nominalScale()

// Export single image as an Asset
Export.image.toAsset({image:ic,
                      description: "full_ortho_srer_sept_2019_1cm",
                      assetId: "users/jgillan/full_ortho_sept",
                      scale: iscale.getInfo(),
                      region: region1,
                      maxPixels: 1.0e13
                      })

//Add asset to map
Map.addLayer(ic,{},'full_ortho_sept')  
Map.setCenter(-110.8499, 31.8109,13)


//Put all vegetation height models into an image collection
var ic_VHM = ee.ImageCollection
           .fromImages([image1_VHM,image2_VHM]);

//Mosaic all of the canopy height models
var ic2 = ic_VHM.mosaic()

//Sets a projection using one of the image's coordinate ref. system as well as the scale in meters
ic2 = ic2.setDefaultProjection({crs:image.projection().crs(),
                                                scale:0.01  // 1cm                           
                                })

// Define an extent, the buffer at the end is needed to include all the transects.                                
var region1 = ee.Feature(ee.Geometry.MultiPolygon(table.geometry().coordinates()).bounds()).buffer(500).bounds()

// Just to double check, get nominal scale of the image
var iscale = ic2.projection().nominalScale()

// Export single image as an Asset
Export.image.toAsset({image:ic2,
                      description: "full_VHM_srer_sept_2019_1cm",
                      assetId: "users/geponce................./full_VHM_sept",
                      scale: iscale.getInfo(),
                      region: region1,
                      maxPixels: 1.0e13
                      })

print('ic2', ic2)

//Add Vegetation Height models to map
Map.addLayer(ic2,{},'Vegetation Height') 

//Calculate Green leaf algorithm from orthomosaic
var GLA = image.expression(
    '((2 * Green) - Red - Blue) / ((2 * Green) + Red + Blue)', {
      'Red': image.select('b1'),
      'Green': image.select('b2'),
      'Blue': image.select('b3')
      }).rename('GLA');
print('GLA', GLA)

//Add GLA to map display
Map.addLayer(GLA,{},'GLA')

//Convert orthomosaic from int8 to float. That way all features are in same data type
var image_float = image.toFloat()
print('image_float', image_float)

///////////////////////////////Supervised Classification////////////////////////////////////////////////

//Removing the periphery of the Vegetation Height Model images. In some plots, the VHM had a broader extent compared to the orthomosaics. This mask makes them basically the same size.

var vhm = vhm_2019.mosaic()
var mask = image.select('b1').neq(0);
vhm = vhm.updateMask(mask)

//print('image3', image3)

//selecting the bands from the orthomosaic and vegetation height model
var bands2 = image_float.select('b1', 'b2', 'b3').rename(['RED','GREEN','BLUE'])
var VHM_band = vhm.select('b1').rename('CHM_BAND')

//Stacking the green leaf algorithm, the orthomosaic, and VHM (total of 5 bands)
var stack = GLA.addBands(bands2).addBands(VHM_band)
var bands3 = stack.bandNames()
print('bands3', bands3)
print('stack', stack)

//convert the individual training data geometries into a FeatureCollection. Class types are distinguished by 'class'
var polygons = ee.FeatureCollection([
  ee.Feature(herb, {'class': 0}),
  ee.Feature(woody, {'class': 1}),
  ee.Feature(bareground, {'class': 2}),
  ee.Feature(shadow, {'class': 3}),
  ])
  
//Extract the features values (GLA, red, green, blue, VHM) for all pixels within the regions defined in 'polygons'
//This is the training data
  var training = stack.sampleRegions({
   collection: polygons,
   properties: ['class'],
    scale: 0.05
  })
  
// Train a CART classifier with default parameters.
var trained = ee.Classifier.cart().train(training, 'class', bands3);
  
print('trained', trained)

//Classify the image
var classified = stack.classify(trained);
print('classified', classified)

//Describe all the decision trees.
var explained = trained.explain()
print('explained', explained)

//Add the classified image to the map display
Map.addLayer(classified,
             {min: 0, max: 3, palette: ['81FA4C', '245A0D', '996633', '100400']},
             'classification');      

//Some performance tests and Confuson matrix
var testing_feat = testing_bare.merge(testing_woody).merge(testing_herb).merge(testing_shadow)  

 var performance = stack.sampleRegions({
   collection: testing_feat,
   properties: ['class'],
    scale: 0.05
  })
  
 var withRandom = performance.randomColumn();
 print('withRandom',withRandom);

 //Approximately 50% for testing
var testingPartition = withRandom.filter(ee.Filter.lt('random', 0.9));
// Approximately 50% for validation
var validationPartition = withRandom.filter(ee.Filter.gte('random', 0.1));
var test = testingPartition.classify(trained);
print('test', test)
 //Add confusion matrix
 var confusionMatrix = test.errorMatrix('class', 'classification');
 print('confusion matrix', confusionMatrix);

/////////////////////////////Create GEE web-app to display imagery products and generate graphical summaries of vegetation cover and vegetation heights////////////////////////////////
//Merge footprints of images
var fprints = fpa.merge(fpb).merge(fpc)

// Mask and clip layers (In the case of vegetation heights, 0's are masked out)
// Sept. 2019
class_sep_2019 = class_sep_2019.clip(fprints)
rgb1cm_sep_2019 = rgb1cm_sep_2019.clip(fprints)
chm_sep_2019 = chm_sep_2019.clip(fprints)
var mask_chm = chm_sep_2019.select('b1').neq(0)
chm_sep_2019 = chm_sep_2019.updateMask(mask_chm)
// May 2019
class_may_2019 = class_may_2019.clip(fprints)
rgb1cm_may_2019 = rgb1cm_may_2019.clip(fprints)
chm_may_2019 = chm_may_2019.clip(fprints)
mask_chm = chm_may_2019.select('chm_may').neq(0)
chm_may_2019 = chm_may_2019.updateMask(mask_chm)


// ### Display Data Layers
// A reference point displayed on the map to visualize the location clicked
var point = ee.Geometry.Point(-110.13, 32.33);
var dot = ui.Map.Layer(point, {color: 'FF0000'}, 'Reference_Point');
Map.layers().set(0, dot)

// Sept. 2019
Map.addLayer(rgb1cm_sep_2019,{}, 'Sep_2019 RGB 1cm',true)
Map.addLayer(chm_sep_2019,{min:0.1, max:5, palette:['blue','green','yellow','red']},'Sep_2019 Vegetation Height Model', false)
Map.addLayer(class_sep_2019, {min:1,max:4, palette:['b9d980','316033','dfc885','black']}, 'Sep_2019 Classification_5cm', false)
// May 2019
Map.addLayer(rgb1cm_may_2019,{}, 'May_2019 RGB 1cm',true)
Map.addLayer(chm_may_2019,{min:0.1, max:5, palette:['blue','green','yellow','red']},'May_2019 Vegeation Height Model', false)
Map.addLayer(class_may_2019, {min:1,max:4, palette:['b9d980','316033','dfc885','black']}, 'May_2019 Classification_5cm', false)
// Footprints polygons
Map.addLayer(fprints.style({fillColor:'FFFF0000', color:'FFFF00', width:3}),{},'Image Footprints', true)
Map.setCenter(-110.84574, 31.80538, 14)

// ************** Functions *********************
// To create thumbnail for color legend in right panel for the VHM
function makeColorBarParams(palette) {
  return {
    bbox: [0, 0, 1, 0.1],
    dimensions: '100x10',
    format: 'png',
    min: 0,
    max: 1,
    palette: palette,
  };
}

// Styling for 1 row legend
var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          padding: '8px', // height 
          margin: '0 0 4px 0' // width
        }
      });
 
      // Add the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
     return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};

// To remove a layer (source:geetools) using name
var removeLayer = function(name) {
  var layers = Map.layers()
  // list of layers names
  var names = []
  layers.forEach(function(lay) {
    var lay_name = lay.getName()
    names.push(lay_name)
  })
  // get index
  var index = names.indexOf(name)
  if (index > -1) {
    // if name in names
    var layer = layers.get(index)
    Map.remove(layer)
  } else {
    print('Layer '+name+' not found')
  }
}

// To define plot options, this is useful to set parameters of a plot
function set_opts (p_mtitle, p_xtitle, p_ytitle) {
  return ( {
                chartArea:{
                          left:100,
                          top: 50,
                          // size: 12,
                          width: '100%',
                          height: '100%',
                          bottom: 60
                          
                },
                 lineWidth: 1,
                 pointSize: 1,
                 title: p_mtitle,
                 titleTextStyle: {
                          color: '#000',
                          fontName: 'sans-serif',
                          fontSize: 16,
                          //marginTop: '70',
                          bold: true,
                          italic: false
                        },
                //legend: {position: 'none'},
                series: {//'b9d980','316033'
                          0: { color: '81FA4C'},
                          1: { color: '316033'},
                },
                hAxis: {
                        title:  p_xtitle,
                        textStyle: {
                          fontSize: 16,
                          fontStyle: 'Arial',
                          marginTop: '50',
                          color: '#808080'
                        },
                        titleTextStyle: {
                          color: '#000',
                          fontName: 'sans-serif',
                          fontSize: 16,
                          marginTop: '70',
                          bold: true,
                          italic: false
                        }
                },
                vAxis: {
                        title: p_ytitle,
                        textStyle: {
                          fontSize: 16,
                          fontStyle: 'Arial',
                          marginTop: '50',
                          color: '#808080'
                        },
                        titleTextStyle: {
                          color: '#000',
                          fontName: 'sans-serif',
                          fontSize: 16,
                          marginTop: '70',
                          bold: true,
                          italic: false
                        }
                }
                
    });
}

var lookup_names = ee.Dictionary.fromLists(
    ['1', '2', '3', '4'],
    ['Herb', 'Woody','Bareground','Shadow']
  );
// Create a dictionary for looking up colors of landcover classes.
var lookup_palette = ee.Dictionary.fromLists(
    ['1', '2', '3', '4'],
    ['b9d980','316033','dfc885','black']
  );
 
 
// Create a feature for a landcover class that includes the area covered.
function createFeature(landcover_class_stats) {
  landcover_class_stats = ee.Dictionary(landcover_class_stats);
  var class_number = landcover_class_stats.get('classification');
  var result = {
    landcover_class_number: class_number,
    landcover_class_name: lookup_names.get(class_number),
    landcover_class_palette: lookup_palette.get(class_number),
    area_m2: landcover_class_stats.get('sum')
  };
  return ee.Feature(null, result); // Creates a feature without a geometry.
}
// Create a JSON dictionary for piechart colors 
// E.g. https://developers.google.com/chart/interactive/docs/gallery/piechart
function createPieChartSliceDictionary(fc) {
  return ee.List(fc.aggregate_array("landcover_class_palette"))
    .map(function(p) {
      return {
        'color': p
      };
    }).getInfo();
}

// To generate histogram of two images 
function getHistogram(v_class, v_vhm, v_region, v_title, v_xTitle, v_yTitle) {
    // Select just woody
    var woody = v_class.select('classification').eq(2)
    var VHM_woody = v_vhm.updateMask(woody).rename('Woody')

    //Select just the herb pixels
    var herb = v_class.select('classification').eq(1)
    var VHM_herb = v_vhm.updateMask(herb).rename('Herb')
    
    //Stack the woody and herb pixels into a single object
    var herb_woody = VHM_herb.addBands(VHM_woody)
  
    
    //Define design properties histogram
  
    //Return histogram chart
   return ui.Chart.image.histogram({
      image: herb_woody, 
      region: v_region,
      scale: 1,
     // maxBuckets: 20,
      minBucketWidth: 0.5,
      maxPixels:1e13
    }).setSeriesNames(['herb', 'woody'])
      .setOptions(set_opts(v_title, v_xTitle, v_yTitle))
}

// To generate PieChart of landcover
function getPieChart(v_class,v_region, v_title){
  // Clip the classification image using the footprint clicked by the user
  var landcover = v_class.clip(v_region.first())
  // Create a dictionary for looking up names of landcover classes.
  
  // Summarize landcover classes in a region of interest.
  var area_image_with_landcover_class = ee.Image.pixelArea().addBands(landcover);
  var reduction_results = area_image_with_landcover_class.reduceRegion({
    reducer: ee.Reducer.sum().group({
      groupField: 1,
      groupName: 'classification',
    }),
    geometry: v_region.first().geometry(),
    scale: 0.05,
    bestEffort: true,
   });
  
  //Perform stats by group
  var roi_stats = ee.List(reduction_results.get('groups'));
  // Get Stats for each class/group
  var landcover_fc = ee.FeatureCollection(roi_stats.map(createFeature)); 

  // Return the piechart 
  return ui.Chart.feature.byFeature({
              features: landcover_fc,
              xProperty: 'landcover_class_name',
              yProperties: ['area_m2', 'landcover_class_number']
            })
            .setChartType('PieChart')
            .setOptions({
                         chartArea:{
                           left:0,
                           right:0,
                           top: 50,
                          // // size: 12,
                          width: '100%',
                          height: '100%',
                          //bottom: 50
                          
                         },
                         title: v_title,
                         is3D: true,
                         width:500,
                         height:200,
                         align:'center',
                         titleTextStyle: {
                                    color: '#000',
                                    fontName: 'sans-serif',
                                    fontSize: 16,
                                    textAlign: 'center',
                                    //marginTop: '70',
                                    bold: true,
                                    italic: false
                                  },
                          slices: createPieChartSliceDictionary(landcover_fc),
                          sliceVisibilityThreshold: 0 
             })
}

function closePlots(){
  if (chm_chartPanel.style().get('shown')) {
    chm_chartPanel.style().set('shown', false);
    chm_chartPanel2.style().set('shown', false);
    cover_chartPanel.style().set('shown', false);
    cover_chartPanel2.style().set('shown', false);
    close_button.style().set('shown', false);
  } 
  
}
// ########### END-Functions section #########################

// Title 
var v_title = 'SRER Drone Data Explorer (2019)';
// Create a panel to hold widgets.
var panel = ui.Panel();
panel.style().set('width', '350px');

// Create an intro panel with labels.
var intro = ui.Panel([
  ui.Label({
    value: v_title,
    style: {fontSize: '20px', fontWeight: 'bold'}
  }),
  ui.Label('The Layers tool allows you display an RGB orthomosaic with 1 cm resolution, a classified image at 5 cm, and a vegetation height model (VHM).'),
  ui.Label('Click on any image footprint on the map to show graphical summaries of vegetation indicators. For an enlarged view of the graph, click on the top-right corner icon (↗).'),
  ui.Label('Note:',{fontWeight:'bold'}), 
  ui.Label('Visualizations are only generated when user clicks within the footprints.'),
  ui.Label(' ')
]);
panel.add(intro);

// Display lat/lng of the location selected in the panel
var lon = ui.Label();
var lat = ui.Label();
var na = ui.Label()
panel.add(ui.Panel([lon, lat], ui.Panel.Layout.flow('horizontal')));

// Create panels to hold plots
var chm_chartPanel = ui.Panel({
  style:
      {height: '235px', width: '600px', position: 'bottom-right', shown: false, border:'1px solid black'}
});
var chm_chartPanel2 = ui.Panel({
  style:
      {height: '235px', width: '600px', position: 'top-right', shown: false, border:'1px solid black'}
});
var cover_chartPanel = ui.Panel({
  style:
      {height: '235px', width: '600px', position: 'bottom-left', shown: false, border:'1px solid black'}
});
var cover_chartPanel2 = ui.Panel({
  style:
      {height: '235px', width: '600px', position: 'top-left', shown: false, border:'1px solid black'}
});

var close_button = ui.Panel({
  style:
      {height: '45px', width: '87px', position: 'top-center', padding:'0px', margin:'0px', shown: false, border:'0px solid black'}
});
// Add the panel variables to the current Map
Map.add(chm_chartPanel);
Map.add(chm_chartPanel2);
Map.add(cover_chartPanel)
Map.add(cover_chartPanel2)
Map.add(close_button)

// ### Add an event call that will be triggered when the map is clicked.
Map.onClick(function(coords) {
  // Remote specific layer 
  removeLayer('Reference_Point')  
  
  // Update the lon/lat panel with values from the click event. The coordinates are used to do
  // a spatial filter 
  lon.setValue('lon: ' + coords.lon.toFixed(2)),
  lat.setValue('lat: ' + coords.lat.toFixed(2));

  // Add a red dot for the point clicked on.
  point = ee.Geometry.Point(coords.lon, coords.lat);
  dot = ui.Map.Layer(point, {color: 'FF0000'}, 'Reference_Point');
  
  Map.layers().set(8, dot);
  // Filter the featureCollection(footprints) by using the coordinates clicked
  var selection = ee.FeatureCollection(fprints).filterBounds(ee.Geometry.Point(coords.lon, coords.lat))
  var bt_close;
  // Activate/Show panels for plots
  if (!chm_chartPanel.style().get('shown')) {
    chm_chartPanel.style().set('shown', true);
    close_button.style().set('shown', true);
  } 
  if (!chm_chartPanel2.style().get('shown')) {
    chm_chartPanel2.style().set('shown', true);
    
  }
  if (!cover_chartPanel.style().get('shown')) {
    cover_chartPanel.style().set('shown', true);
  }
  if (!cover_chartPanel2.style().get('shown')) {
    cover_chartPanel2.style().set('shown', true);
  }
  

    // *** Histogram plots calls *** 
    // 
    // Image from Sept. 2019
     var herbWoody_sep2019 = getHistogram(class_sep_2019, chm_sep_2019, selection,
                                          'Sept. 2019 Vegetation heights ', 
                                          'Vegetation heights (m)', 'Frequency')  
    
    // Image from May 2019
     var herbWoody_may2019 = getHistogram(class_may_2019, chm_may_2019, selection,
                                          'May 2019 Vegetation heights ', 
                                          'Vegetation heights (m)', 'Frequency')  
    
    // Add Histograms to the panels
    chm_chartPanel.widgets().reset([herbWoody_sep2019]);  
    chm_chartPanel2.widgets().reset([herbWoody_may2019]);  
    
    // *** PieChart plots calls ***
    // Image Sept. 2019
    var landcoverPieChart_sep2019 = getPieChart(class_sep_2019,selection, 'Sept. 2019 landcover class areas')
    
    // Image May 2019  
    var landcoverPieChart_may2019 = getPieChart(class_may_2019,selection, 'May 2019 landcover class areas')
    
    // Add PieCharts to the panels
    cover_chartPanel.widgets().reset([landcoverPieChart_sep2019]);
    cover_chartPanel2.widgets().reset([landcoverPieChart_may2019]);
    bt_close = ui.Button({label:'Close plots', onClick: function() {
                                      if (chm_chartPanel.style().get('shown')) {
                                        chm_chartPanel.style().set('shown', false);
                                        chm_chartPanel2.style().set('shown', false);
                                        cover_chartPanel.style().set('shown', false);
                                        cover_chartPanel2.style().set('shown', false);
                                        close_button.style().set('shown', false);
                                      } 
                                }
                    })  
    close_button.widgets().reset([bt_close])
    
});
// Show crosshair as cursor over map 
Map.style().set('cursor', 'crosshair');

// *** Add Legends to the right-panel ***
// Add Legend to right-panel
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});
 
// Create legend title
var legendTitle = ui.Label({
  value: 'Landcover classes',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }
});
 
// Add the title to the panel
legend.add(legendTitle);
//  Palette with the colors
var palette =['b9d980','316033','dfc885','000000'];
 
// name of the legend
var names = ['Herb','Woody','Bareground','Shadows'];
 
// Add color and and names
for (var i = 0; i < 4; i++) {
  legend.add(makeRow(palette[i], names[i]));
  }  
// Add legend to the panel
panel.add(legend)

// Add Horizontal legend for VHM
var vis = {min: 0.1, max: 4, palette: 'blue,green,yellow,red'};
// Create the color bar for the legend.
var colorBar = ui.Thumbnail({
  image: ee.Image.pixelLonLat().select(0),
  params: makeColorBarParams(vis.palette),
  style: {stretch: 'horizontal', margin: '0px 8px', maxHeight: '24px'},
});

// Create a panel with three numbers for the legend.
var legendLabels = ui.Panel({
  widgets: [
    ui.Label(vis.min, {margin: '4px 8px'}),
    ui.Label(
        (vis.max / 2),
        {margin: '4px 8px', textAlign: 'center', stretch: 'horizontal'}),
    ui.Label(vis.max, {margin: '4px 8px'})
  ],
  layout: ui.Panel.Layout.flow('horizontal')
}); 

var legendTitle = ui.Label({
  value: 'Vegetation Height Model (m)',
  style: {fontWeight: 'bold'}
});

// Add the legendPanel to the map.
var legendPanel = ui.Panel([legendTitle, colorBar, legendLabels]);
panel.add(legendPanel)


// Enable the right panel
ui.root.insert(2, panel);

// Deactivate map tools
Map.drawingTools().setShown(false) 
Map.setControlVisibility({zoomControl:false})